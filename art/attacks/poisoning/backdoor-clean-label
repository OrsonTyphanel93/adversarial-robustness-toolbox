# MIT License
#
# Copyright (C) The Adversarial Robustness Toolbox (ART) Authors 2022
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
 """

import logging
from typing import Callable, List, Optional, Tuple, Union

import numpy as np

from art.attacks.attack import PoisoningAttackBlackBox

logger = logging.getLogger(__name__)

class PoisoningAttackCleanLabelBackdoor(PoisoningAttackBlackBox):
    attack_params = PoisoningAttackBlackBox.attack_params + ["trigger_func"]
    _estimator_requirements = ()

    def __init__(self, trigger_func: Callable) -> None:
        super().__init__()
        self.trigger_func = trigger_func
        self._check_params()

    def poison(self, x: np.ndarray, y: Optional[np.ndarray] = None, broadcast=False, **kwargs) -> Tuple[np.ndarray, np.ndarray]:
        if y is None:
            raise ValueError("Target labels `y` need to be provided for a targeted attack.")

        if broadcast:
            y_attack = np.broadcast_to(y, (x.shape[0], y.shape[0]))
        else:
            y_attack = np.copy(y)

        num_poison = len(x)
        if num_poison == 0:
            raise ValueError("Must input at least one poison point.")
        poisoned = np.copy(x)

        if callable(self.trigger_func):
            # Apply the trigger function to the input data
            poisoned = self.trigger_func(poisoned)

        # Labels remain unchanged
        poisoned_labels = y_attack # Use the broadcasted or copied labels

        return poisoned, poisoned_labels  # Return the poisoned data with clean labels

    def _check_params(self) -> None:
        if not callable(self.trigger_func):
            raise ValueError("Trigger function must be callable.")

    @staticmethod
    def is_broadcast(broadcast: bool) -> bool:
        return isinstance(broadcast, bool)

    def _validate_inputs(self, x: np.ndarray, y: Optional[np.ndarray] = None, broadcast: bool = False) -> None:
        if y is None:
            raise ValueError("Target labels `y` need to be provided for a targeted attack.")

        if not self.is_broadcast(broadcast):
            raise ValueError("`broadcast` must be a boolean value.")  

"""
